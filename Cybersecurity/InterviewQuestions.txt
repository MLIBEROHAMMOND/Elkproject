Cloud Access Control

[]With cloud networking going strong and adversaries growing more sophisticated, it is important that you control access to your network.  Start by closing all ports that are not needed and limited access to only authorized people.  In my Azure project, I only allowed SSH from my whitelisted home IP.  With NSG and SSH protocols in place, you have a much better chance of maintaining control. In Project 1, I did not make a network on-premises, instead it was on a cloud network. I configured access controls by disabling most ports and only allowing access to admin through SSH. By whitelisting only my IP address, no other user can access my network. This is important because if the wrong bad actor has access they can setup "backdoors" and hide out for possibly months gaining data access and knowledge about my company's crown jewels. You want to have a secure network so that only admin can remote access securely through SSH in order to protect these valuables. his shows how to build a cloud network with controled access through firewalls, port security, load balancers , containers, as well as monitoring files and metrics with an Elk container using Filebeat and Metricbeat on Kibana.

[]There are several Explain Solution Requirements to maintain said controls.  Inside my network, I created a Jumpbox VM, protected by Network Security Group 1, in order for the Jumpbox VM, which hosts ansible, to maintain security for setting up Web 1 and Web 2 containers. We also put a firewall at SSH point of entry to the Elk container to provide add security and monitoring. Again, the only access to the network is through whitelisted home public IP. This is very useful as more of the work force has been operating remotely. By only allowing access through a whitelisted IP and by using firewalls and monitoring the network, I created a secure and scalable network. Specifically, I closed all access ports besides 80 http and 22 ssh for Jumpbox as well as all access ports on Elk and NSG besides  22 ssh and 5601. For an added layer of protection, I added my SSH using a public key on port 22 only, which only allows access from my home public IP. So if I was an admin working remotley this would be ideal. The Jumpbox has a private ip 10.0.0.4 and is authorized to ssh over port 22 to both Web 1 and Web 2 private IP.

[]My solution is scalable because when you use playbook to setup servers, you can always add additional servers. Using load balancers and containers also makes the system highly scalable while avoiding latency issues and maximizing the server pools. Virtual Private Network (VPN) could be more secure but would drive up operational costs so there is a need to balance that disadvantage with adequate security. In the end it is important to look at the problem we are solving for and make our choices from that lens.





